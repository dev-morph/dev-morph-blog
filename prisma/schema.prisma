generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CommentReply {
  id              Int      @id @default(autoincrement())
  root_comment_id Int
  username        String   @db.VarChar(255)
  comment         String   @db.Text
  created_at      DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)
}

model Comment {
  id         Int      @id @default(autoincrement())
  post_id    Int
  username   String?   @db.VarChar(255)
  password   String?   @db.VarChar(10)
  avatar_image String? @db.VarChar(50)
  comment    String   @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Like {
  ip         String    @db.VarChar(15)
  post_id    Int
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)

  @@ignore
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(255)
  filename   String   @db.VarChar(255)
  post_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)
  Post       Post     @relation(fields: [post_id], references: [id])

  @@index([post_id], map: "Image_post_id_fkey")
}

model Post {
  id         Int             @id @default(autoincrement())
  title      String          @db.VarChar(255)
  contents   String          @db.Text
  hits       Int             @default(0)
  thumbnail  String?         @db.VarChar(255)
  created_at DateTime        @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)
  images     Image[]
  categories Post_Category[]
}

model Post_Category {
  post_id     Int
  category_id Int
  Category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  Post        Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([post_id, category_id])
  @@index([category_id], map: "Post_Category_category_id_fkey")
}

model Category {
  id         Int             @id
  name       String          @unique(map: "name") @db.VarChar(255)
  sort_order Int
  created_at DateTime        @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)
  posts      Post_Category[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String?   @unique @db.VarChar(255)
  username   String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  role_id    Int
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @updatedAt @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.DateTime(0)
  Role       Role      @relation(fields: [role_id], references: [id])

  @@index([role_id], map: "User_role_id_fkey")
}

model Role {
  id    Int    @id
  name  String @db.VarChar(20)
  users User[]
}
